// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/galera-healthcheck/monit_client"
	"github.com/pivotal-golang/lager"
)

type FakeMonitClient struct {
	StartServiceStub        func(startMode string) (bool, error)
	startServiceMutex       sync.RWMutex
	startServiceArgsForCall []struct {
		startMode string
	}
	startServiceReturns struct {
		result1 bool
		result2 error
	}
	StopServiceStub        func() (bool, error)
	stopServiceMutex       sync.RWMutex
	stopServiceArgsForCall []struct{}
	stopServiceReturns     struct {
		result1 bool
		result2 error
	}
	GetLoggerStub        func() lager.Logger
	getLoggerMutex       sync.RWMutex
	getLoggerArgsForCall []struct{}
	getLoggerReturns     struct {
		result1 lager.Logger
	}
}

func (fake *FakeMonitClient) StartService(startMode string) (bool, error) {
	fake.startServiceMutex.Lock()
	fake.startServiceArgsForCall = append(fake.startServiceArgsForCall, struct {
		startMode string
	}{startMode})
	fake.startServiceMutex.Unlock()
	if fake.StartServiceStub != nil {
		return fake.StartServiceStub(startMode)
	} else {
		return fake.startServiceReturns.result1, fake.startServiceReturns.result2
	}
}

func (fake *FakeMonitClient) StartServiceCallCount() int {
	fake.startServiceMutex.RLock()
	defer fake.startServiceMutex.RUnlock()
	return len(fake.startServiceArgsForCall)
}

func (fake *FakeMonitClient) StartServiceArgsForCall(i int) string {
	fake.startServiceMutex.RLock()
	defer fake.startServiceMutex.RUnlock()
	return fake.startServiceArgsForCall[i].startMode
}

func (fake *FakeMonitClient) StartServiceReturns(result1 bool, result2 error) {
	fake.StartServiceStub = nil
	fake.startServiceReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StopService() (bool, error) {
	fake.stopServiceMutex.Lock()
	fake.stopServiceArgsForCall = append(fake.stopServiceArgsForCall, struct{}{})
	fake.stopServiceMutex.Unlock()
	if fake.StopServiceStub != nil {
		return fake.StopServiceStub()
	} else {
		return fake.stopServiceReturns.result1, fake.stopServiceReturns.result2
	}
}

func (fake *FakeMonitClient) StopServiceCallCount() int {
	fake.stopServiceMutex.RLock()
	defer fake.stopServiceMutex.RUnlock()
	return len(fake.stopServiceArgsForCall)
}

func (fake *FakeMonitClient) StopServiceReturns(result1 bool, result2 error) {
	fake.StopServiceStub = nil
	fake.stopServiceReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) GetLogger() lager.Logger {
	fake.getLoggerMutex.Lock()
	fake.getLoggerArgsForCall = append(fake.getLoggerArgsForCall, struct{}{})
	fake.getLoggerMutex.Unlock()
	if fake.GetLoggerStub != nil {
		return fake.GetLoggerStub()
	} else {
		return fake.getLoggerReturns.result1
	}
}

func (fake *FakeMonitClient) GetLoggerCallCount() int {
	fake.getLoggerMutex.RLock()
	defer fake.getLoggerMutex.RUnlock()
	return len(fake.getLoggerArgsForCall)
}

func (fake *FakeMonitClient) GetLoggerReturns(result1 lager.Logger) {
	fake.GetLoggerStub = nil
	fake.getLoggerReturns = struct {
		result1 lager.Logger
	}{result1}
}

var _ monit_client.MonitClient = new(FakeMonitClient)
