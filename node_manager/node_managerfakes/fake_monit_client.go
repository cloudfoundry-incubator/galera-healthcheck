// This file was generated by counterfeiter
package node_managerfakes

import (
	"sync"

	service_manager "github.com/cloudfoundry-incubator/galera-healthcheck/node_manager"
)

type FakeMonitClient struct {
	StartStub        func(serviceName string) error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		serviceName string
	}
	startReturns struct {
		result1 error
	}
	startReturnsOnCall map[int]struct {
		result1 error
	}
	StopStub        func(serviceName string) error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
		serviceName string
	}
	stopReturns struct {
		result1 error
	}
	stopReturnsOnCall map[int]struct {
		result1 error
	}
	StatusStub        func(serviceName string) (string, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		serviceName string
	}
	statusReturns struct {
		result1 string
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMonitClient) Start(serviceName string) error {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("Start", []interface{}{serviceName})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub(serviceName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.startReturns.result1
}

func (fake *FakeMonitClient) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeMonitClient) StartArgsForCall(i int) string {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return fake.startArgsForCall[i].serviceName
}

func (fake *FakeMonitClient) StartReturns(result1 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMonitClient) StartReturnsOnCall(i int, result1 error) {
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMonitClient) Stop(serviceName string) error {
	fake.stopMutex.Lock()
	ret, specificReturn := fake.stopReturnsOnCall[len(fake.stopArgsForCall)]
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("Stop", []interface{}{serviceName})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub(serviceName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.stopReturns.result1
}

func (fake *FakeMonitClient) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeMonitClient) StopArgsForCall(i int) string {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return fake.stopArgsForCall[i].serviceName
}

func (fake *FakeMonitClient) StopReturns(result1 error) {
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMonitClient) StopReturnsOnCall(i int, result1 error) {
	fake.StopStub = nil
	if fake.stopReturnsOnCall == nil {
		fake.stopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMonitClient) Status(serviceName string) (string, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("Status", []interface{}{serviceName})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub(serviceName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statusReturns.result1, fake.statusReturns.result2
}

func (fake *FakeMonitClient) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeMonitClient) StatusArgsForCall(i int) string {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.statusArgsForCall[i].serviceName
}

func (fake *FakeMonitClient) StatusReturns(result1 string, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StatusReturnsOnCall(i int, result1 string, result2 error) {
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMonitClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service_manager.MonitClient = new(FakeMonitClient)
