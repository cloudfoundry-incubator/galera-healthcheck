// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/galera-healthcheck/api"
)

type FakeHealthChecker struct {
	CheckStub        func() (string, error)
	checkMutex       sync.RWMutex
	checkArgsForCall []struct {
	}
	checkReturns struct {
		result1 string
		result2 error
	}
	checkReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthChecker) Check() (string, error) {
	fake.checkMutex.Lock()
	ret, specificReturn := fake.checkReturnsOnCall[len(fake.checkArgsForCall)]
	fake.checkArgsForCall = append(fake.checkArgsForCall, struct {
	}{})
	fake.recordInvocation("Check", []interface{}{})
	fake.checkMutex.Unlock()
	if fake.CheckStub != nil {
		return fake.CheckStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthChecker) CheckCallCount() int {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return len(fake.checkArgsForCall)
}

func (fake *FakeHealthChecker) CheckCalls(stub func() (string, error)) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = stub
}

func (fake *FakeHealthChecker) CheckReturns(result1 string, result2 error) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	fake.checkReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthChecker) CheckReturnsOnCall(i int, result1 string, result2 error) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	if fake.checkReturnsOnCall == nil {
		fake.checkReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.checkReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHealthChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.HealthChecker = new(FakeHealthChecker)
