// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"net/http"
	"sync"

	"github.com/cloudfoundry-incubator/galera-healthcheck/api"
)

type FakeMonitClient struct {
	GetStatusStub        func(*http.Request) (string, error)
	getStatusMutex       sync.RWMutex
	getStatusArgsForCall []struct {
		arg1 *http.Request
	}
	getStatusReturns struct {
		result1 string
		result2 error
	}
	getStatusReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	StartServiceBootstrapStub        func(*http.Request) (string, error)
	startServiceBootstrapMutex       sync.RWMutex
	startServiceBootstrapArgsForCall []struct {
		arg1 *http.Request
	}
	startServiceBootstrapReturns struct {
		result1 string
		result2 error
	}
	startServiceBootstrapReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	StartServiceJoinStub        func(*http.Request) (string, error)
	startServiceJoinMutex       sync.RWMutex
	startServiceJoinArgsForCall []struct {
		arg1 *http.Request
	}
	startServiceJoinReturns struct {
		result1 string
		result2 error
	}
	startServiceJoinReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	StartServiceSingleNodeStub        func(*http.Request) (string, error)
	startServiceSingleNodeMutex       sync.RWMutex
	startServiceSingleNodeArgsForCall []struct {
		arg1 *http.Request
	}
	startServiceSingleNodeReturns struct {
		result1 string
		result2 error
	}
	startServiceSingleNodeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	StopServiceStub        func(*http.Request) (string, error)
	stopServiceMutex       sync.RWMutex
	stopServiceArgsForCall []struct {
		arg1 *http.Request
	}
	stopServiceReturns struct {
		result1 string
		result2 error
	}
	stopServiceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMonitClient) GetStatus(arg1 *http.Request) (string, error) {
	fake.getStatusMutex.Lock()
	ret, specificReturn := fake.getStatusReturnsOnCall[len(fake.getStatusArgsForCall)]
	fake.getStatusArgsForCall = append(fake.getStatusArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("GetStatus", []interface{}{arg1})
	fake.getStatusMutex.Unlock()
	if fake.GetStatusStub != nil {
		return fake.GetStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMonitClient) GetStatusCallCount() int {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return len(fake.getStatusArgsForCall)
}

func (fake *FakeMonitClient) GetStatusCalls(stub func(*http.Request) (string, error)) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = stub
}

func (fake *FakeMonitClient) GetStatusArgsForCall(i int) *http.Request {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	argsForCall := fake.getStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMonitClient) GetStatusReturns(result1 string, result2 error) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = nil
	fake.getStatusReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) GetStatusReturnsOnCall(i int, result1 string, result2 error) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = nil
	if fake.getStatusReturnsOnCall == nil {
		fake.getStatusReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getStatusReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StartServiceBootstrap(arg1 *http.Request) (string, error) {
	fake.startServiceBootstrapMutex.Lock()
	ret, specificReturn := fake.startServiceBootstrapReturnsOnCall[len(fake.startServiceBootstrapArgsForCall)]
	fake.startServiceBootstrapArgsForCall = append(fake.startServiceBootstrapArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("StartServiceBootstrap", []interface{}{arg1})
	fake.startServiceBootstrapMutex.Unlock()
	if fake.StartServiceBootstrapStub != nil {
		return fake.StartServiceBootstrapStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startServiceBootstrapReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMonitClient) StartServiceBootstrapCallCount() int {
	fake.startServiceBootstrapMutex.RLock()
	defer fake.startServiceBootstrapMutex.RUnlock()
	return len(fake.startServiceBootstrapArgsForCall)
}

func (fake *FakeMonitClient) StartServiceBootstrapCalls(stub func(*http.Request) (string, error)) {
	fake.startServiceBootstrapMutex.Lock()
	defer fake.startServiceBootstrapMutex.Unlock()
	fake.StartServiceBootstrapStub = stub
}

func (fake *FakeMonitClient) StartServiceBootstrapArgsForCall(i int) *http.Request {
	fake.startServiceBootstrapMutex.RLock()
	defer fake.startServiceBootstrapMutex.RUnlock()
	argsForCall := fake.startServiceBootstrapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMonitClient) StartServiceBootstrapReturns(result1 string, result2 error) {
	fake.startServiceBootstrapMutex.Lock()
	defer fake.startServiceBootstrapMutex.Unlock()
	fake.StartServiceBootstrapStub = nil
	fake.startServiceBootstrapReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StartServiceBootstrapReturnsOnCall(i int, result1 string, result2 error) {
	fake.startServiceBootstrapMutex.Lock()
	defer fake.startServiceBootstrapMutex.Unlock()
	fake.StartServiceBootstrapStub = nil
	if fake.startServiceBootstrapReturnsOnCall == nil {
		fake.startServiceBootstrapReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.startServiceBootstrapReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StartServiceJoin(arg1 *http.Request) (string, error) {
	fake.startServiceJoinMutex.Lock()
	ret, specificReturn := fake.startServiceJoinReturnsOnCall[len(fake.startServiceJoinArgsForCall)]
	fake.startServiceJoinArgsForCall = append(fake.startServiceJoinArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("StartServiceJoin", []interface{}{arg1})
	fake.startServiceJoinMutex.Unlock()
	if fake.StartServiceJoinStub != nil {
		return fake.StartServiceJoinStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startServiceJoinReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMonitClient) StartServiceJoinCallCount() int {
	fake.startServiceJoinMutex.RLock()
	defer fake.startServiceJoinMutex.RUnlock()
	return len(fake.startServiceJoinArgsForCall)
}

func (fake *FakeMonitClient) StartServiceJoinCalls(stub func(*http.Request) (string, error)) {
	fake.startServiceJoinMutex.Lock()
	defer fake.startServiceJoinMutex.Unlock()
	fake.StartServiceJoinStub = stub
}

func (fake *FakeMonitClient) StartServiceJoinArgsForCall(i int) *http.Request {
	fake.startServiceJoinMutex.RLock()
	defer fake.startServiceJoinMutex.RUnlock()
	argsForCall := fake.startServiceJoinArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMonitClient) StartServiceJoinReturns(result1 string, result2 error) {
	fake.startServiceJoinMutex.Lock()
	defer fake.startServiceJoinMutex.Unlock()
	fake.StartServiceJoinStub = nil
	fake.startServiceJoinReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StartServiceJoinReturnsOnCall(i int, result1 string, result2 error) {
	fake.startServiceJoinMutex.Lock()
	defer fake.startServiceJoinMutex.Unlock()
	fake.StartServiceJoinStub = nil
	if fake.startServiceJoinReturnsOnCall == nil {
		fake.startServiceJoinReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.startServiceJoinReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StartServiceSingleNode(arg1 *http.Request) (string, error) {
	fake.startServiceSingleNodeMutex.Lock()
	ret, specificReturn := fake.startServiceSingleNodeReturnsOnCall[len(fake.startServiceSingleNodeArgsForCall)]
	fake.startServiceSingleNodeArgsForCall = append(fake.startServiceSingleNodeArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("StartServiceSingleNode", []interface{}{arg1})
	fake.startServiceSingleNodeMutex.Unlock()
	if fake.StartServiceSingleNodeStub != nil {
		return fake.StartServiceSingleNodeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startServiceSingleNodeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMonitClient) StartServiceSingleNodeCallCount() int {
	fake.startServiceSingleNodeMutex.RLock()
	defer fake.startServiceSingleNodeMutex.RUnlock()
	return len(fake.startServiceSingleNodeArgsForCall)
}

func (fake *FakeMonitClient) StartServiceSingleNodeCalls(stub func(*http.Request) (string, error)) {
	fake.startServiceSingleNodeMutex.Lock()
	defer fake.startServiceSingleNodeMutex.Unlock()
	fake.StartServiceSingleNodeStub = stub
}

func (fake *FakeMonitClient) StartServiceSingleNodeArgsForCall(i int) *http.Request {
	fake.startServiceSingleNodeMutex.RLock()
	defer fake.startServiceSingleNodeMutex.RUnlock()
	argsForCall := fake.startServiceSingleNodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMonitClient) StartServiceSingleNodeReturns(result1 string, result2 error) {
	fake.startServiceSingleNodeMutex.Lock()
	defer fake.startServiceSingleNodeMutex.Unlock()
	fake.StartServiceSingleNodeStub = nil
	fake.startServiceSingleNodeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StartServiceSingleNodeReturnsOnCall(i int, result1 string, result2 error) {
	fake.startServiceSingleNodeMutex.Lock()
	defer fake.startServiceSingleNodeMutex.Unlock()
	fake.StartServiceSingleNodeStub = nil
	if fake.startServiceSingleNodeReturnsOnCall == nil {
		fake.startServiceSingleNodeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.startServiceSingleNodeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StopService(arg1 *http.Request) (string, error) {
	fake.stopServiceMutex.Lock()
	ret, specificReturn := fake.stopServiceReturnsOnCall[len(fake.stopServiceArgsForCall)]
	fake.stopServiceArgsForCall = append(fake.stopServiceArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("StopService", []interface{}{arg1})
	fake.stopServiceMutex.Unlock()
	if fake.StopServiceStub != nil {
		return fake.StopServiceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopServiceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMonitClient) StopServiceCallCount() int {
	fake.stopServiceMutex.RLock()
	defer fake.stopServiceMutex.RUnlock()
	return len(fake.stopServiceArgsForCall)
}

func (fake *FakeMonitClient) StopServiceCalls(stub func(*http.Request) (string, error)) {
	fake.stopServiceMutex.Lock()
	defer fake.stopServiceMutex.Unlock()
	fake.StopServiceStub = stub
}

func (fake *FakeMonitClient) StopServiceArgsForCall(i int) *http.Request {
	fake.stopServiceMutex.RLock()
	defer fake.stopServiceMutex.RUnlock()
	argsForCall := fake.stopServiceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMonitClient) StopServiceReturns(result1 string, result2 error) {
	fake.stopServiceMutex.Lock()
	defer fake.stopServiceMutex.Unlock()
	fake.StopServiceStub = nil
	fake.stopServiceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) StopServiceReturnsOnCall(i int, result1 string, result2 error) {
	fake.stopServiceMutex.Lock()
	defer fake.stopServiceMutex.Unlock()
	fake.StopServiceStub = nil
	if fake.stopServiceReturnsOnCall == nil {
		fake.stopServiceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.stopServiceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	fake.startServiceBootstrapMutex.RLock()
	defer fake.startServiceBootstrapMutex.RUnlock()
	fake.startServiceJoinMutex.RLock()
	defer fake.startServiceJoinMutex.RUnlock()
	fake.startServiceSingleNodeMutex.RLock()
	defer fake.startServiceSingleNodeMutex.RUnlock()
	fake.stopServiceMutex.RLock()
	defer fake.stopServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMonitClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.MonitClient = new(FakeMonitClient)
